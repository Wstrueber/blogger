{"version":3,"sources":["Card.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","titleShow","body","bodyShow","showBlogs","handleTitle","bind","assertThisInitialized","handleForm","handleBody","removeBlog","e","setState","target","value","length","alert","localStorage","setItem","preventDefault","targetClass","parentNode","getItem","className","removeItem","hidden","_this2","react_default","a","createElement","onChange","type","placeholder","style","margin","height","width","id","onClick","displayLS","map","x","react","key","uuid","slice","Component","obj","keys","arr","i","push","App","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8c6cc08.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport uuid from 'uuid/v4';\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            title: '',\n            titleShow: false,\n            body: '',\n            bodyShow: false,\n            showBlogs: false,\n        }\n        this.handleTitle = this.handleTitle.bind(this);\n        this.handleForm = this.handleForm.bind(this);\n        this.handleBody = this.handleBody.bind(this);\n        this.removeBlog = this.removeBlog.bind(this);\n        this.showBlogs = this.showBlogs.bind(this);\n    }\n    handleTitle(e) {\n        this.setState({ title: e.target.value })\n    }\n    handleBody(e) {\n        this.setState({ body: e.target.value })\n    }\n    handleForm(e) {\n        if (this.state.title.length < 1) alert('Title: minimum 1 character required')\n        else if (this.state.title.length > 40) alert('Title: 40 characters or less required')\n        else if (this.state.body.length < 1) alert('Body: minimum 1 character required');\n        else if (this.state.title && this.state.body) {\n            localStorage.setItem(this.state.title, this.state.body);\n            this.setState({ title: '', body: '' })\n        } else {\n            alert('Both are fields required!');\n        }\n        e.preventDefault();\n    }\n    showBlogs() {\n        if (!this.state.showBlogs) {\n            this.setState({ showBlogs: true, titleShow: true, bodyShow: true })\n        } else {\n            this.setState({ showBlogs: false, titleShow: false, bodyShow: false })\n        }\n    }\n    removeBlog(e) {\n        let targetClass = e.target.parentNode;\n        if (localStorage.getItem(targetClass.className)) {\n            localStorage.removeItem(targetClass.className);\n        }\n        targetClass.hidden = true;\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n\n                    <header>\n                        <h1>Blogger</h1>\n                    </header>\n                </div>\n\n                <span>Title: </span>\n                <input value={this.state.title}\n                    onChange={this.handleTitle} type=\"text\"></input>\n\n                <div className=\"text_area_div\">\n                    <textarea className=\"text_area\" placeholder=\"Write your blog here\" value={this.state.body}\n                        style={{ margin: '0px', height: '252px', width: '525px' }}\n                        onChange={this.handleBody} type=\"text\"></textarea>\n                    <button id=\"publish\"\n                        onClick={this.handleForm}>Publish</button>\n                </div>\n                <div>\n                    {this.state.showBlogs ? <button id=\"blog_visibility\" onClick={this.showBlogs}>Hide Blogs</button>\n                        : <button id=\"blog_visibility\" onClick={this.showBlogs}>Show Blogs</button>}\n                </div>\n\n\n\n                {this.state.bodyShow && this.state.titleShow ?\n                    <div className=\"blog_container\">\n                        <div className=\"blog_body\">\n                            {displayLS().map(x =>\n                                <Fragment key={uuid().slice(0, 8)}>\n                                    <div className={x[0]} hidden={false} key={uuid().slice(0, 8)}>\n                                        <h1 key={uuid().slice(0, 8)}>{x[0]}</h1>\n                                        <p key={uuid().slice(0, 8)}>{x[1]}</p>\n                                        <button className=\"remove_btns\" key={uuid().slice(0, 8)} onClick={this.removeBlog}>Remove</button>\n                                    </div>\n                                </Fragment>\n                            )}\n                        </div>\n                    </div> : null}\n\n            </div>\n        )\n    }\n}\n\nconst displayLS = () => {\n\n    let obj = Object.keys(localStorage)\n    let arr = [];\n    for (let i = 0; i < obj.length; i++) {\n        arr.push([obj[i], localStorage.getItem(obj[i])]);\n    }\n    return arr;\n}\n\nexport default Card;","import React from 'react';\nimport './App.css';\nimport Card from './Card';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}